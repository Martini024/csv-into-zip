{"version":3,"sources":["logo.svg","utils/isValidURL.js","utils/getFileExtension.js","components/GenerateZip/index.js","utils/generateZipFromCSV.js","utils/getCSVColumns.js","App.js","reportWebVitals.js","index.js"],"names":["isValidURL","str","RegExp","test","getFileExtension","url","split","pop","GenerateZip","Form","useForm","form","useState","csvFile","setCSVFile","visible","setVisible","columns","setColumns","hideModal","resetFields","onFinish","value","getFieldsValue","groupBy","urlColumns","folderNameStruct","fileNameStruct","separator","zipFileName","zip","JSZip","Papa","parse","download","header","complete","results","data","forEach","row","column","fileExtension","saveToZipRelativePath","folderName","map","col","join","fileName1","file","Promise","resolve","reject","JSZipUtils","getBinaryContent","err","binary","createFolders","generateAsync","type","then","content","saveAs","generateZipFromCSV","useEffect","error","preview","getCSVColumns","label","onClick","maskClosable","title","onOk","onCancel","layout","Item","name","valuePropName","getValueFromEvent","e","target","files","required","onChange","initialValue","options","mode","noStyle","shouldUpdate","prev","curr","getFieldValue","maxLength","App","className","src","logo","alt","direction","size","href","rel","GithubOutlined","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f04cdae.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default function isValidURL(str) {\n\tvar pattern = new RegExp(\n\t\t'^(https?:\\\\/\\\\/)?' + // protocol\n\t\t\t'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n\t\t\t'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n\t\t\t'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n\t\t\t'(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n\t\t\t'(\\\\#[-a-z\\\\d_]*)?$',\n\t\t'i',\n\t) // fragment locator\n\treturn !!pattern.test(str)\n}\n","export default function getFileExtension(url) {\n\treturn url.split('.').pop()\n}\n","import React, { useState, useEffect } from 'react'\nimport { Button, Form, Modal, Input, Select } from 'antd'\nimport generateZipFromCSV from '../../utils/generateZipFromCSV'\nimport getCSVColumns from '../../utils/getCSVColumns'\n\nexport default function GenerateZip() {\n\tconst [form] = Form.useForm()\n\tconst [csvFile, setCSVFile] = useState(null)\n\tconst [visible, setVisible] = useState(false)\n\tconst [columns, setColumns] = useState([])\n\n\tconst showModal = () => setVisible(true)\n\tconst hideModal = () => {\n\t\tsetVisible(false)\n\t\tform.resetFields()\n\t}\n\n\tconst onOk = () => {\n\t\tonFinish()\n\t\thideModal()\n\t}\n\n\tconst onCancel = () => hideModal()\n\n\tconst onFinish = () => {\n\t\tconst value = form.getFieldsValue()\n\t\tconst {\n\t\t\tcsvFile,\n\t\t\tgroupBy,\n\t\t\turlColumns,\n\t\t\tfolderNameStruct,\n\t\t\tfileNameStruct,\n\t\t\tseparator,\n\t\t\tzipFileName,\n\t\t} = value\n\t\tgenerateZipFromCSV(\n\t\t\tcsvFile,\n\t\t\tgroupBy,\n\t\t\turlColumns,\n\t\t\tfolderNameStruct,\n\t\t\tfileNameStruct,\n\t\t\tseparator,\n\t\t\tzipFileName,\n\t\t)\n\t}\n\n\tuseEffect(() => {\n\t\tif (csvFile) {\n\t\t\tgetCSVColumns(csvFile).then((columns) => {\n\t\t\t\tsetColumns(columns.map((column) => ({ label: column, value: column })))\n\t\t\t})\n\t\t}\n\t}, [csvFile])\n\n\treturn (\n\t\t<>\n\t\t\t<Button type=\"primary\" onClick={showModal}>\n\t\t\t\tGenerate Zip\n\t\t\t</Button>\n\t\t\t<Modal\n\t\t\t\tvisible={visible}\n\t\t\t\tmaskClosable={false}\n\t\t\t\ttitle=\"Generate Zip\"\n\t\t\t\tonOk={onOk}\n\t\t\t\tonCancel={onCancel}\n\t\t\t>\n\t\t\t\t<Form form={form} layout=\"vertical\" onFinish={onFinish}>\n\t\t\t\t\t<Form.Item\n\t\t\t\t\t\tlabel=\"CSV File\"\n\t\t\t\t\t\tname=\"csvFile\"\n\t\t\t\t\t\tvaluePropName=\"file\"\n\t\t\t\t\t\tgetValueFromEvent={(e) => (e.target.files ? e.target.files[0] : null)}\n\t\t\t\t\t\trequired\n\t\t\t\t\t>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\t\tonChange={(e) => setCSVFile(e.target.files ? e.target.files[0] : null)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Item>\n\t\t\t\t\t<Form.Item label=\"Group By\" name=\"groupBy\" initialValue=\"ROW\" required>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Row',\n\t\t\t\t\t\t\t\t\tvalue: 'ROW',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Column',\n\t\t\t\t\t\t\t\t\tvalue: 'COLUMN',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Item>\n\t\t\t\t\t<Form.Item label=\"URL Columns\" name=\"urlColumns\" required>\n\t\t\t\t\t\t<Select mode=\"multiple\" options={columns} />\n\t\t\t\t\t</Form.Item>\n\t\t\t\t\t<Form.Item\n\t\t\t\t\t\tnoStyle\n\t\t\t\t\t\tshouldUpdate={(prev, curr) => {\n\t\t\t\t\t\t\treturn prev.groupBy !== curr.groupBy\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{({ getFieldValue }) => (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{getFieldValue('groupBy') === 'ROW' && (\n\t\t\t\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\t\t\t\tlabel=\"Folder Name Structure\"\n\t\t\t\t\t\t\t\t\t\tname=\"folderNameStruct\"\n\t\t\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Select mode=\"multiple\" options={columns} />\n\t\t\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t{getFieldValue('groupBy') === 'COLUMN' && (\n\t\t\t\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\t\t\t\tlabel=\"File Name Structure\"\n\t\t\t\t\t\t\t\t\t\tname=\"fileNameStruct\"\n\t\t\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Select mode=\"multiple\" options={columns} />\n\t\t\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Form.Item>\n\t\t\t\t\t<Form.Item label=\"Separator\" name=\"separator\" initialValue=\"_\" required>\n\t\t\t\t\t\t<Input type=\"text\" maxLength=\"1\" />\n\t\t\t\t\t</Form.Item>\n\t\t\t\t\t<Form.Item label=\"Zip File Name\" name=\"zipFileName\" required>\n\t\t\t\t\t\t<Input type=\"text\" />\n\t\t\t\t\t</Form.Item>\n\t\t\t\t</Form>\n\t\t\t</Modal>\n\t\t</>\n\t)\n}\n","import JSZip from 'jszip'\nimport JSZipUtils from 'jszip-utils'\nimport Papa from 'papaparse'\nimport { saveAs } from 'file-saver'\nimport isValidURL from './isValidURL'\nimport getFileExtension from './getFileExtension'\n\nexport default function generateZipFromCSV(\n\tcsvFile,\n\tgroupBy = 'ROW',\n\turlColumns = [],\n\tfolderNameStruct = [],\n\tfileNameStruct = [],\n\tseparator = '_',\n\tzipFileName = 'file_bundle',\n) {\n\tlet zip = new JSZip()\n\tPapa.parse(csvFile, {\n\t\tdownload: true,\n\t\theader: true,\n\t\tcomplete: (results) => {\n\t\t\tconst rows = results.data\n\t\t\trows.forEach((row) => {\n\t\t\t\turlColumns.forEach((column) => {\n\t\t\t\t\tif (isValidURL(row[column])) {\n\t\t\t\t\t\tconst fileExtension = getFileExtension(row[column])\n\t\t\t\t\t\tlet saveToZipRelativePath = ''\n\t\t\t\t\t\tswitch (groupBy) {\n\t\t\t\t\t\t\tcase 'ROW':\n\t\t\t\t\t\t\t\tconst folderName = folderNameStruct\n\t\t\t\t\t\t\t\t\t.map((col) => (row[col] ? row[col] : 'null'))\n\t\t\t\t\t\t\t\t\t.join(separator)\n\t\t\t\t\t\t\t\tsaveToZipRelativePath = `${zipFileName}/${folderName}/${column}.${fileExtension}`\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\tcase 'COLUMN':\n\t\t\t\t\t\t\t\tconst fileName1 = fileNameStruct\n\t\t\t\t\t\t\t\t\t.map((col) => (row[col] ? row[col] : 'null'))\n\t\t\t\t\t\t\t\t\t.join(separator)\n\t\t\t\t\t\t\t\tsaveToZipRelativePath = `${zipFileName}/${column}/${fileName1}.${fileExtension}`\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tzip.file(\n\t\t\t\t\t\t\tsaveToZipRelativePath,\n\t\t\t\t\t\t\tnew Promise(function (resolve, reject) {\n\t\t\t\t\t\t\t\tJSZipUtils.getBinaryContent(row[column], function (err, data) {\n\t\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\t\treject(err)\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tresolve(data)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbinary: true,\n\t\t\t\t\t\t\t\tcreateFolders: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t\t\tzip.generateAsync({ type: 'blob' }).then((content) => {\n\t\t\t\tsaveAs(content, zipFileName)\n\t\t\t})\n\t\t},\n\t})\n}\n","import Papa from 'papaparse'\n\nexport default function getCSVColumns(csvFile) {\n\treturn new Promise((complete, error) => {\n\t\tPapa.parse(csvFile, {\n\t\t\tpreview: 1,\n\t\t\tcomplete: (results) => {\n\t\t\t\tcomplete(results.data?.[0])\n\t\t\t},\n\t\t\terror,\n\t\t})\n\t})\n}\n","import logo from './logo.svg'\nimport { GithubOutlined } from '@ant-design/icons'\nimport { Space, Button } from 'antd'\n\nimport './App.css'\nimport 'antd/dist/antd.css'\nimport GenerateZip from './components/GenerateZip/index'\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<p>Batch download files from urls inside csv file.</p>\n\t\t\t\t<Space direction=\"vertical\">\n\t\t\t\t\t<GenerateZip />\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype=\"link\"\n\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\thref=\"https://github.com/Martini024/csv-into-zip\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<GithubOutlined />\n\t\t\t\t\t\tCSV into Zip\n\t\t\t\t\t</Button>\n\t\t\t\t</Space>\n\t\t\t</header>\n\t\t</div>\n\t)\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}