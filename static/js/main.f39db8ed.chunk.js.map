{"version":3,"sources":["logo.svg","utils/getFileName.js","utils/isValidURLArray.js","components/GenerateZip/index.js","utils/generateZipFromCSV.js","utils/getCSVColumns.js","App.js","index.js"],"names":["getFileName","url","withExtension","fileNameWithExtension","split","pop","slice","join","isValidURLArray","array","isValid","forEach","el","str","RegExp","test","GenerateZip","onUpdate","onStartDownload","onFinishDownload","Form","useForm","form","useState","csvFile","setCSVFile","visible","setVisible","columns","setColumns","hideModal","resetFields","onFinish","value","getFieldsValue","groupBy","urlColumns","folderNameStruct","separator","zipFileName","zip","JSZip","Papa","parse","download","header","complete","results","data","row","column","urlArray","folderName","map","col","fileName","saveToZipRelativePath","file","Promise","resolve","reject","JSZipUtils","getBinaryContent","err","binary","createFolders","generateAsync","type","then","content","saveAs","generateZipFromCSV","useEffect","error","preview","getCSVColumns","label","onClick","maskClosable","title","onOk","onCancel","layout","Item","name","valuePropName","getValueFromEvent","e","target","files","required","onChange","initialValue","options","tooltip","mode","maxLength","Typography","Paragraph","App","loading","setLoading","percent","setPercent","className","src","logo","alt","direction","toFixed","message","info","style","width","size","status","href","rel","GithubOutlined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f39db8ed.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default function getFileName(url, withExtension = true) {\n\tconst fileNameWithExtension = url.split('/').pop()\n\tif (withExtension) return fileNameWithExtension\n\telse {\n\t\treturn fileNameWithExtension.split('.').slice(0, -1).join('.')\n\t}\n}\n","export function isValidURL(str) {\n\tvar pattern = new RegExp(\n\t\t'^(https?:\\\\/\\\\/)?' + // protocol\n\t\t\t'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n\t\t\t'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n\t\t\t'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n\t\t\t'(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n\t\t\t'(\\\\#[-a-z\\\\d_]*)?$',\n\t\t'i',\n\t) // fragment locator\n\treturn !!pattern.test(str)\n}\n\nexport default function isValidURLArray(array) {\n\tlet isValid = true\n\tif (array)\n\t\tarray.forEach((el) => {\n\t\t\tif (!isValidURL(el)) isValid = false\n\t\t})\n\telse return false\n\treturn isValid\n}\n","import React, { useState, useEffect } from 'react'\nimport { Button, Form, Modal, Input, Select } from 'antd'\nimport generateZipFromCSV from '../../utils/generateZipFromCSV'\nimport getCSVColumns from '../../utils/getCSVColumns'\n\nexport default function GenerateZip({ onUpdate, onStartDownload, onFinishDownload }) {\n\tconst [form] = Form.useForm()\n\tconst [csvFile, setCSVFile] = useState(null)\n\tconst [visible, setVisible] = useState(false)\n\tconst [columns, setColumns] = useState([])\n\n\tconst showModal = () => setVisible(true)\n\tconst hideModal = () => {\n\t\tsetVisible(false)\n\t\tform.resetFields()\n\t}\n\n\tconst onOk = () => {\n\t\tonFinish()\n\t\thideModal()\n\t}\n\n\tconst onCancel = () => hideModal()\n\n\tconst onFinish = () => {\n\t\tonStartDownload()\n\t\tconst value = form.getFieldsValue()\n\t\tconst { csvFile, groupBy, urlColumns, folderNameStruct, separator, zipFileName } = value\n\t\tgenerateZipFromCSV(\n\t\t\tcsvFile,\n\t\t\tgroupBy,\n\t\t\turlColumns,\n\t\t\tfolderNameStruct,\n\t\t\tseparator,\n\t\t\tzipFileName,\n\t\t\tonUpdate,\n\t\t\tonFinishDownload,\n\t\t)\n\t}\n\n\tuseEffect(() => {\n\t\tif (csvFile) {\n\t\t\tgetCSVColumns(csvFile).then((columns) => {\n\t\t\t\tsetColumns(columns.map((column) => ({ label: column, value: column })))\n\t\t\t})\n\t\t}\n\t}, [csvFile])\n\n\treturn (\n\t\t<>\n\t\t\t<Button type=\"primary\" onClick={showModal}>\n\t\t\t\tGenerate Zip\n\t\t\t</Button>\n\t\t\t<Modal\n\t\t\t\tvisible={visible}\n\t\t\t\tmaskClosable={false}\n\t\t\t\ttitle=\"Generate Zip\"\n\t\t\t\tonOk={onOk}\n\t\t\t\tonCancel={onCancel}\n\t\t\t>\n\t\t\t\t<Form form={form} layout=\"vertical\" onFinish={onFinish}>\n\t\t\t\t\t<Form.Item\n\t\t\t\t\t\tlabel=\"CSV File\"\n\t\t\t\t\t\tname=\"csvFile\"\n\t\t\t\t\t\tvaluePropName=\"file\"\n\t\t\t\t\t\tgetValueFromEvent={(e) => (e.target.files ? e.target.files[0] : null)}\n\t\t\t\t\t\trequired\n\t\t\t\t\t>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\t\tonChange={(e) => setCSVFile(e.target.files ? e.target.files[0] : null)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Item>\n\t\t\t\t\t<Form.Item label=\"Group By\" name=\"groupBy\" initialValue=\"ROW\" required>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Row - zipFolder/whose/urlColumn/file',\n\t\t\t\t\t\t\t\t\tvalue: 'ROW',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Column - zipFolder/urlColumn/whose/file',\n\t\t\t\t\t\t\t\t\tvalue: 'COLUMN',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Item>\n\t\t\t\t\t<Form.Item\n\t\t\t\t\t\tlabel=\"URL Columns\"\n\t\t\t\t\t\tname=\"urlColumns\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t\ttooltip={{ title: 'Please choose the columns containing url for download' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Select mode=\"multiple\" options={columns} />\n\t\t\t\t\t</Form.Item>\n\t\t\t\t\t<Form.Item\n\t\t\t\t\t\tlabel=\"Folder Name Structure\"\n\t\t\t\t\t\tname=\"folderNameStruct\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t\ttooltip={{\n\t\t\t\t\t\t\ttitle: 'Please choose the folder name of \"whose\" (concatenated by separator)',\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Select mode=\"multiple\" options={columns} />\n\t\t\t\t\t</Form.Item>\n\t\t\t\t\t<Form.Item label=\"Separator\" name=\"separator\" initialValue=\"_\" required>\n\t\t\t\t\t\t<Input type=\"text\" maxLength=\"1\" />\n\t\t\t\t\t</Form.Item>\n\t\t\t\t\t<Form.Item label=\"Zip File Name\" name=\"zipFileName\" required>\n\t\t\t\t\t\t<Input type=\"text\" />\n\t\t\t\t\t</Form.Item>\n\t\t\t\t</Form>\n\t\t\t</Modal>\n\t\t</>\n\t)\n}\n","import { saveAs } from 'file-saver'\nimport JSZip from 'jszip'\nimport JSZipUtils from 'jszip-utils'\nimport Papa from 'papaparse'\nimport getFileName from './getFileName'\nimport isValidURLArray from './isValidURLArray'\n\nexport default function generateZipFromCSV(\n\tcsvFile,\n\tgroupBy = 'ROW',\n\turlColumns = [],\n\tfolderNameStruct = [],\n\tseparator = '_',\n\tzipFileName = 'file_bundle',\n\tonUpdate = () => {},\n\tonFinishDownload = () => {},\n) {\n\tlet zip = new JSZip()\n\tPapa.parse(csvFile, {\n\t\tdownload: true,\n\t\theader: true,\n\t\tcomplete: (results) => {\n\t\t\tconst rows = results.data\n\t\t\trows.forEach((row) => {\n\t\t\t\turlColumns.forEach((column) => {\n\t\t\t\t\tlet urlArray = row[column]?.split('\\n')\n\t\t\t\t\tif (isValidURLArray(urlArray)) {\n\t\t\t\t\t\turlArray.forEach((url) => {\n\t\t\t\t\t\t\tconst folderName = folderNameStruct\n\t\t\t\t\t\t\t\t.map((col) => (row[col] ? row[col] : 'null'))\n\t\t\t\t\t\t\t\t.join(separator)\n\t\t\t\t\t\t\tconst fileName = getFileName(url)\n\t\t\t\t\t\t\tlet saveToZipRelativePath = ''\n\t\t\t\t\t\t\tswitch (groupBy) {\n\t\t\t\t\t\t\t\tcase 'ROW':\n\t\t\t\t\t\t\t\t\tsaveToZipRelativePath = `${zipFileName}/${folderName}/${column}/${fileName}`\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\tcase 'COLUMN':\n\t\t\t\t\t\t\t\t\tsaveToZipRelativePath = `${zipFileName}/${column}/${folderName}/${fileName}`\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tzip.file(\n\t\t\t\t\t\t\t\tsaveToZipRelativePath,\n\t\t\t\t\t\t\t\tnew Promise(function (resolve, reject) {\n\t\t\t\t\t\t\t\t\tJSZipUtils.getBinaryContent(url, function (err, data) {\n\t\t\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\t\t\treject(err)\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tresolve(data)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbinary: true,\n\t\t\t\t\t\t\t\t\tcreateFolders: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t\t\tzip.generateAsync({ type: 'blob' }, onUpdate).then((content) => {\n\t\t\t\tonFinishDownload()\n\t\t\t\tsaveAs(content, zipFileName)\n\t\t\t})\n\t\t},\n\t})\n}\n","import Papa from 'papaparse'\n\nexport default function getCSVColumns(csvFile) {\n\treturn new Promise((complete, error) => {\n\t\tPapa.parse(csvFile, {\n\t\t\tpreview: 1,\n\t\t\tcomplete: (results) => {\n\t\t\t\tcomplete(results.data?.[0])\n\t\t\t},\n\t\t\terror,\n\t\t})\n\t})\n}\n","import logo from './logo.svg'\nimport { useState } from 'react'\nimport { GithubOutlined } from '@ant-design/icons'\nimport { Space, Button, Progress, Row, Typography, message } from 'antd'\n\nimport './App.css'\nimport 'antd/dist/antd.css'\nimport GenerateZip from './components/GenerateZip/index'\nimport getFileName from './utils/getFileName'\n\nconst { Paragraph } = Typography\n\nfunction App() {\n\tconst [loading, setLoading] = useState(false)\n\tconst [percent, setPercent] = useState(0)\n\n\tconst onUpdate = ({ percent }) => {\n\t\tsetPercent(percent.toFixed(2))\n\t}\n\n\tconst onStartDownload = () => {\n\t\tsetLoading(true)\n\t}\n\tconst onFinishDownload = () => {\n\t\tsetLoading(false)\n\t\tmessage.info('Generate Zip Successfully!')\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<p>Batch download files from urls inside csv file.</p>\n\t\t\t\t<Space direction=\"vertical\">\n\t\t\t\t\t<GenerateZip\n\t\t\t\t\t\tonStartDownload={onStartDownload}\n\t\t\t\t\t\tonUpdate={onUpdate}\n\t\t\t\t\t\tonFinishDownload={onFinishDownload}\n\t\t\t\t\t/>\n\t\t\t\t\t{loading && (\n\t\t\t\t\t\t<div style={{ width: '400px' }}>\n\t\t\t\t\t\t\t<Progress percent={percent} size=\"small\" status=\"active\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype=\"link\"\n\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\thref=\"https://github.com/Martini024/csv-into-zip\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<GithubOutlined />\n\t\t\t\t\t\tCSV into Zip\n\t\t\t\t\t</Button>\n\t\t\t\t</Space>\n\t\t\t</header>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n)\n"],"sourceRoot":""}